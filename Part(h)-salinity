{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "24726430",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "id": "46afec21",
   "metadata": {},
   "outputs": [],
   "source": [
    "sal_data = pd.read_csv(\"salinity_data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "id": "505cc6a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = sal_data[\"Time\"].to_numpy()\n",
    "x = x.reshape(-1, 1)\n",
    "# print(x)\n",
    "\n",
    "y = sal_data[\"Temperature\"].to_numpy()\n",
    "# print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "id": "37123641",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_ln = LinearRegression()\n",
    "model_dr = DecisionTreeRegressor()\n",
    "model_fr = RandomForestRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "id": "e32c7008",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-18 {color: black;background-color: white;}#sk-container-id-18 pre{padding: 0;}#sk-container-id-18 div.sk-toggleable {background-color: white;}#sk-container-id-18 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-18 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-18 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-18 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-18 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-18 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-18 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-18 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-18 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-18 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-18 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-18 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-18 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-18 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-18 div.sk-item {position: relative;z-index: 1;}#sk-container-id-18 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-18 div.sk-item::before, #sk-container-id-18 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-18 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-18 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-18 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-18 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-18 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-18 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-18 div.sk-label-container {text-align: center;}#sk-container-id-18 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-18 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-18\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" checked><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 274,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_ln.fit(x, y)\n",
    "model_dr.fit(x, y)\n",
    "model_fr.fit(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "id": "4b246788",
   "metadata": {},
   "outputs": [],
   "source": [
    "start_value = 734122\n",
    "gap = 30\n",
    "\n",
    "# Create the array\n",
    "x_pre = np.arange(start_value, start_value + 60 * gap, gap)\n",
    "x_pre = x_pre.reshape(-1, 1)\n",
    "# x_pre = np.concatenate((x, x_pre))\n",
    "# print(x_pre)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "id": "febf51d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pre_ln = model_ln.predict(x_pre)\n",
    "y_pre_dr = model_dr.predict(x_pre)\n",
    "y_pre_fr = model_fr.predict(x_pre)\n",
    "# y_pre_log = model_fr.predict(x_pre)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "id": "2c68ff24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "53/53 [==============================] - 1s 2ms/step - loss: 786184704.0000\n",
      "Epoch 2/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 2908755.0000\n",
      "Epoch 3/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 8715.2695\n",
      "Epoch 4/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 41.8131\n",
      "Epoch 5/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.7430\n",
      "Epoch 6/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6196\n",
      "Epoch 7/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6174\n",
      "Epoch 8/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6195\n",
      "Epoch 9/50\n",
      "53/53 [==============================] - 0s 1ms/step - loss: 0.6236\n",
      "Epoch 10/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6478\n",
      "Epoch 11/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6303\n",
      "Epoch 12/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6197\n",
      "Epoch 13/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6381\n",
      "Epoch 14/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6285\n",
      "Epoch 15/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6426\n",
      "Epoch 16/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6255\n",
      "Epoch 17/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6378\n",
      "Epoch 18/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6311\n",
      "Epoch 19/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6225\n",
      "Epoch 20/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6807\n",
      "Epoch 21/50\n",
      "53/53 [==============================] - 0s 1ms/step - loss: 0.6643\n",
      "Epoch 22/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6302\n",
      "Epoch 23/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6483\n",
      "Epoch 24/50\n",
      "53/53 [==============================] - 0s 1ms/step - loss: 0.6544\n",
      "Epoch 25/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6620\n",
      "Epoch 26/50\n",
      "53/53 [==============================] - 0s 1ms/step - loss: 0.6669\n",
      "Epoch 27/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6543\n",
      "Epoch 28/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6671\n",
      "Epoch 29/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6914\n",
      "Epoch 30/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6496\n",
      "Epoch 31/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6644\n",
      "Epoch 32/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6618\n",
      "Epoch 33/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6793\n",
      "Epoch 34/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6548\n",
      "Epoch 35/50\n",
      "53/53 [==============================] - 0s 1ms/step - loss: 0.6665\n",
      "Epoch 36/50\n",
      "53/53 [==============================] - 0s 1ms/step - loss: 0.6821\n",
      "Epoch 37/50\n",
      "53/53 [==============================] - 0s 1ms/step - loss: 0.6678\n",
      "Epoch 38/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6544\n",
      "Epoch 39/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6823\n",
      "Epoch 40/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6620\n",
      "Epoch 41/50\n",
      "53/53 [==============================] - 0s 1ms/step - loss: 0.7145\n",
      "Epoch 42/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.7069\n",
      "Epoch 43/50\n",
      "53/53 [==============================] - 0s 1ms/step - loss: 0.7968\n",
      "Epoch 44/50\n",
      "53/53 [==============================] - 0s 1ms/step - loss: 0.6523\n",
      "Epoch 45/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.6886\n",
      "Epoch 46/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.7496\n",
      "Epoch 47/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.9223\n",
      "Epoch 48/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.7641\n",
      "Epoch 49/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.7730\n",
      "Epoch 50/50\n",
      "53/53 [==============================] - 0s 2ms/step - loss: 0.8886\n",
      "2/2 [==============================] - 0s 4ms/step\n"
     ]
    }
   ],
   "source": [
    "# Define a simple neural network model\n",
    "model = keras.Sequential([\n",
    "    layers.Dense(64, activation='relu', input_shape=(1,)),\n",
    "    layers.Dense(64, activation='relu'),\n",
    "    layers.Dense(1)  # Output layer with one neuron for regression\n",
    "])\n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "\n",
    "# Train the model\n",
    "model.fit(x, y, epochs=50)  # Adjust the number of epochs as needed\n",
    "\n",
    "# Make predictions\n",
    "y_pre_neural = model.predict(x_pre)\n",
    "# print(y_pre_neural)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "id": "470ff538",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x279767355d0>"
      ]
     },
     "execution_count": 278,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the plot\n",
    "plt.show()\n",
    "\n",
    "plt.plot((x_pre-734250)/360+2011, y_pre_ln, label='linear Regression model')\n",
    "plt.plot((x_pre-734250)/360+2011, y_pre_dr, label='DecisionTreeRegressor model')\n",
    "plt.plot((x_pre-734250)/360+2011, y_pre_fr, label='RandomForestRegressor model')\n",
    "plt.plot((x_pre-734250)/360+2011, y_pre_neural, label='Neural Network model')\n",
    "# plt.axvline(x=734122, c='r', linestyle='--',label='upto 2015')\n",
    "\n",
    "# Add labels and a legend\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Salinity')\n",
    "plt.legend()\n",
    "\n",
    "# Display the plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "48fe5883",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5b024a6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
